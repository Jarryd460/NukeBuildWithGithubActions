# Defines the name of the workflow that will be display on Github under Actions
name: CI

# Defines triggers that would cause this workflow to execute
on:
# Adds a button on Github under Actions to allow the build to be triggered manually
  workflow_dispatch:
# adds a trigger that fires when a push is made to master branch
  push:
    branches: [ master ]
# adds a trigger that fires when a pull request is made to master branch
  pull_request:
    branches: [ master ]

# Defines the jobs that will execute when a trigger fires
jobs:
# Defines the name of the job
  build:
# Defines where this job will run. In this case we run it on multiple environments, specified under strategy -> matrix -> os
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

# Defines the steps that will be executed in this job
    steps:
# Check's out the code
    - uses: actions/checkout@v3

# Gives a name to the step    
    - name: Setup .NET Core SDK - latest
# Installs dotnet 6.0.x on the virtual environment
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.*
        
    - name: set shell script permissions
# Specifies that this step should only execute when not running on windows
      if: ${{ matrix.os != 'windows-latest'}}
# Gives the shell rights to run ./build.sh. If we do not give it permissions, the script will fail with access denied. This seems only applicable for non windows operating systems
      run: chmod +x ./build.sh

# Copies cache of .nuke/temp as well as nuget packages. .nuke/temp is not needed but nuget packages are because build requires gitversion.Tool
    - name: Cache .nuke/temp, ~/.nuget/packages
      uses: actions/cache@v2
      with:
# Specifies the paths to be cached
         path: |
            .nuke/temp
            ~/.nuget/packages
# Creates a unique key for this cache
         key: ${{ runner.os }}-${{ hashFiles('**/global.json', '**/*.csproj') }}

# Executes the build.sh script inside default shell only when not a windows operating system
    - name: build and test (Unix)
      if: ${{ matrix.os != 'windows-latest'}}
      run: ./build.sh --target compile test --verbosity verbose

# Executes the build.ps1 script inside default shell only when a windows operating system
    - name: build and test (Windows)
      if: ${{ matrix.os == 'windows-latest'}}
      run: .\build.ps1 --target compile test --verbosity verbose