# Defines the name of the workflow that will be display on Github under Actions
name: NukeBuildWithGithubActions

# Defines triggers that would cause this workflow to execute
on:
# Adds a button on Github under Actions to allow the build to be triggered manually
  workflow_dispatch:
# adds a trigger that fires when a push is made to master branch
  push:
    branches: [ master ]
# adds a trigger that fires when a pull request is made to master branch
  pull_request:
    branches: [ master ]

# Defines the jobs that will execute when a trigger fires
jobs:
# Defines the name of the job
  build:
# Defines where this job will run
    runs-on: windows-latest
# Defines the steps that will be executed in this job
    steps:
# Check's out the code
    - uses: actions/checkout@v2
# Gives a name to the step and copies cache of .nuke/temp as well as nuget packages. .nuke/temp is not needed but nuget packages are because build requires gitversion.Tool
    - name: Cache .nuke/temp, ~/.nuget/packages
      uses: actions/cache@v2
      with:
# Specifies the paths to be cached
         path: |
            .nuke/temp
            ~/.nuget/packages
# Creates a unique key for this cache
         key: ${{ runner.os }}-${{ hashFiles('**/global.json', '**/*.csproj') }}
    - name: Build And Test
# Specifies what shell to open. In this case powershell core
      shell: pwsh
# Executes the specified command inside powershell core. In this case we execute the Nuke build script which installs dotnet 6.0.x on the virtual environment and executes the compile and test targets
      run: ./build.ps1 --target compile test --verbosity verbose
